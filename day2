/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageCollection = ee.ImageCollection("users/mewchayutaphong/pictures"),
    imageCollection2 = ee.ImageCollection("users/mewchayutaphong/pictures"),
    imageCollection3 = ee.ImageCollection("users/mewchayutaphong/pictures"),
    imageCollection4 = ee.ImageCollection("users/mewchayutaphong/pictures"),
    imageCollection5 = ee.ImageCollection("users/mewchayutaphong/pictures"),
    imageCollection6 = ee.ImageCollection("users/mewchayutaphong/pictures");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// var label = ui.Label('My GEE Label!');
// print(label);

// var label = ui.Label('This app\ncalculates area \nas well as parameter', {whiteSpace: 'pre'});
// print(label);

// var button = ui.Button({
//   label: 'Zoom to Kolhumadulu',
//   onClick: function() {
//     Map.setCenter(2.266393578083512, 73.22899822178088);
//   }
// });
// print(button);

// var checkbox = ui.Checkbox('Show Sentinel 2', true);

// checkbox.onChange(function(checked) {
//   // Shows or hides the first map layer based on the checkbox's value.
//   Map.layers().get(0).setShown(checked);
// });

// function maskS2clouds(image) {
//   var qa = image.select('QA60');

//   // Bits 10 and 11 are clouds and cirrus, respectively.
//   var cloudBitMask = 1 << 10;
//   var cirrusBitMask = 1 << 11;

//   // Both flags should be set to zero, indicating clear conditions.
//   var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
//       .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

//   return image.updateMask(mask).divide(10000);
// }

// var dataset = ee.ImageCollection('COPERNICUS/S2_SR')
//                   .filterDate('2019-01-01', '2020-12-31')
//                   // Pre-filter to get less cloudy granules.
//                   .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',10))
//                   .map(maskS2clouds);

// // visualisation parameters
// var visualization = {
//   min: 0.0,
//   max: 0.3,
//   bands: ['B4', 'B3', 'B2'],
// };

// // get the mean of the dataset
// Map.setCenter(72.8935501941133, 2.6718531872448774,15);
// Map.addLayer(dataset.mean(), visualization, 'RGB');
// print(checkbox);

var image = ee.Image("users/mewchayutaphong/Island_Maldives");

Map.setOptions('SATELLITE');
Map.style().set('cursor', 'crosshair');

Map.centerObject(image,10)

//////////////////

var legend3 = ui.Panel({
style: {
position: 'top-center',
padding: '8px 15px',
fontWeight: 'bold',
fontSize: '18px',
textAlign : 'center'
}
});

// Create legend title
var legendTitle2 = ui.Label({
value: 'Click to get the bathymetry at the location.',
style: {
fontWeight: 'normal',
fontSize: '13px',
margin: '0 0 4px 0',
padding: '8px 15px',
textAlign : 'center'
}
});

var title = 'Bathymetry of the shallow regions of the Maldives (Low Resolution 5 arc seconds)';
legend3.widgets().set(0, ui.Label(title));

Map.add(legend3);

///////////////////

var image2 = ee.FeatureCollection("users/zubba1989/TUTORIALS/Islands_Maldives_Contours");
var image3 = ee.FeatureCollection('users/zubba1989/TUTORIALS/Lagoons_Maldives');

image = image.clip(image3)

Map.addLayer(image2.draw({color: '006600', strokeWidth: 1}), {}, 'Land');

var tmax = image.select('b1');

// Get a palette: a list of hex strings
var palettes = require('users/gena/packages:palettes');
var palette = palettes.kovesi.linear_blue_5_95_c73[7];

//var palette = palettes.matplotlib.viridis[7]

var elevationVis = {
  min: -250,
  max: 0.0,
  palette: ['011de2', 'afafaf', '3603ff', 'fff477', 'b42109'],
};

//Map.addLayer(image, elevationVis, 'Bathymetry @ 5 arcseconds (Diverged colour scheme)');

// Display max temp with defined palette stretched between selected min and max
Map.addLayer(tmax, {min: -15, max: 0, palette: palette}, 'Bathymetry @ 5 arcseconds');

Map.addLayer(image2.draw({color: '006600', strokeWidth: 1}), {}, 'Land');

//////////////////////////////////

// set position of panel

var viz = {
  min: -15,
  max: 0.0,
  palette: palette,
};


var legend = ui.Panel({
style: {
position: 'bottom-left',
padding: '8px 15px'
}
});

// Create legend title
var legendTitle = ui.Label({
value: 'Bathymetry (m)',
style: {
fontWeight: 'bold',
fontSize: '18px',
margin: '0 0 4px 0',
padding: '0'
}
});


// Add the title to the panel
legend.add(legendTitle);

// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((viz.max-viz.min)/100.0).add(viz.min);
var legendImage = gradient.visualize(viz);

// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(viz['max'])
],
});

legend.add(panel);

// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'25x200'},
style: {padding: '1px', position: 'bottom-center'}
});

// add the thumbnail to the legend
legend.add(thumbnail);

// create text on top of legend
var panel = ui.Panel({
widgets: [////////////////////
ui.Label(viz['min'])
],
});

legend.add(panel);
Map.add(legend);

legend.add(legendTitle2);

////////////////////////////////

var legend2 = ui.Panel({
style: {
position: 'bottom-right',
padding: '8px 15px'
}
});

Map.onClick(function(coords) {
  var location = 'lon: ' + coords.lon.toFixed(4) + ' ' +
                 'lat: ' + coords.lat.toFixed(4);
  var click_point = ee.Geometry.Point(coords.lon, coords.lat);

  var demValue = image.reduceRegion(ee.Reducer.first(), click_point, 90).evaluate(function(val){
    var demText = 'Bathymetry Value: ' + val.b1;
    //legend2.widgets().set(0, ui.Label('aaaaaaaaaaaaaaaaaa'));
    legend2.widgets().set(0, ui.Label(demText));
  });
});

Map.add(legend2);